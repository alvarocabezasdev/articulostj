<?php

/**
 * @file
 * A block module that displays recent blog and forum posts.
 */

/**
 * Implements hook_help().
 *
 * Displays help and module information.
 *
 * @param path 
 *   Which path of the site we're using to display help
 * @param arg 
 *   Array that holds the current path as returned from arg() function
 */

//Pagina de ayuda del modulo personalizado
function articulostj_help($path, $arg) {

  switch ($path) {
    
    case "admin/help#articulostj":
      
      return '<p>' . t('Bloque desarrollado para mostrar un listado de los productos con stock 0 con su respectivo enlace a la edición del mismo. </br>La <a href="@blocks">pagina de administración de bloques</a> permite configurar tanto la parte interna del bloque como la posicion del mismo mediante "drag-and-drop". 
        </br>Módulo personalizado desarrollado por Adrián Carvajal y Álvaro Cabezas. Escríbenos con tu duda a: <a href="https://www.gmail.com">alvarocabezasdev@gmail.com</a>.', array(
        '@blocks' => url('admin/structure/block'),
      )) . '</p>';      
      break; 
      
  }
  
}

/**
 * Implements hook_block_info().
 */
//Informacion del bloque 
function articulostj_block_info() {
  $blocks['articulostj'] = array(
    // The name that will appear in the block list.
    'info' => t('Articulostj'),
    // Default setting.
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  return $blocks;
}


//Sentencias a la base de datos para obtener, en este caso, el numero de articulos que mostraremos tanto en el modulo como en la pagina.
//En caso de $display tenga el valor de 'block', se hara una consulta para la informacion del bloque y se omitira $maxstock.
//En caso de $display con valor 'page', se hara una consulta para la informacion de la pagina y $maxstock sera la cantidad maxima de stock para mostrar el articulo
function articulostj_contents($display, $maxstock) {
  //Use Database API to retrieve products.
  //Si es un bloque usamos 0 por defecto para recuperar productos totalmente agotados.
  if ($display == 'block'){

    $query = db_select('field_data_commerce_stock', 'n')
    ->fields('n')
    ->condition('commerce_stock_value', 0); //Published.
    
  /*Si es una página usamos el umbral de la configuración para recuperar
  * productos casi agotados.
  */
  } else {

    $query = db_select('field_data_commerce_stock', 'n')
      ->fields('n')
      ->condition('commerce_stock_value', array(0,$maxstock),'BETWEEN');
      
  }

  return $query->execute();
}

/**
 * Implements hook_block_view().
 * 
 * Prepares the contents of the block.
 */
//Informacion que queremos mostrar en el bloque, llamando a la funcion para obtener los datos de la bd y creando los enlaces a la pagina editar producto
function articulostj_block_view($delta = '') {
  switch ($delta) {
    case 'articulostj':
      $block['subject'] = t('articulostj');
      if (user_access('access articulostj content')) {
        //array de datos para obtener los productos con stock 0 
        $result = articulostj_contents('block',0);
        $items = array();

        foreach ($result as $node) {
          //array para relacionar la tabla con el stock junto con la tabla de productos con la informacion de los datos de cada articulo.
          $product = commerce_product_load($node->entity_id);

          $items[] = array(
            'data' => l($product->sku, 'admin/commerce/products/' . $node->entity_id . '/edit')
          ); 
        }

        //En caso de estar vacio se mostrara No articles available
        if (empty($items)) {
          $block['content'] = t('No articles available.');  
        } 
        else {
          //Si no esta vacio se devolvera el array rellenado anteriormente con los enlaces a los productos
          $block['content'] = theme('item_list', array(
            'items' => $items));
        }
      }
    return $block;
  }
  
}

/**
 * Implements hook_menu().
 */
//Configuramos la vista tanto del bloque como de la pagina.
function articulostj_menu() {
  $items = array();
  //bloque
  $items['admin/config/content/articulostj_menu'] = array(
    'title' => 'articulostj',
    'description' => 'Configuration for Articulostj module',
    'page callback' => 'drupal_get_form',
    'access arguments' => array('access administration pages'),
    'page arguments' => array('articulostj_form'),
    'type' => MENU_NORMAL_ITEM
  );

    //pagina
    $items['articulostj_ra'] = array(
    'title' => 'Últimas unidades',
    'page callback' => '_articulostj_page', //llamamos a la funcion que obtiene la informacion de la pagina
    'access callback' => TRUE,
  );

  return $items;
}


/**
 * Page callback: Current posts settings
 *
 * @see articulostj_menu()
 */
//Configuracion del bloque para obtener el stock maximo que queremos mostrar para cada articulo
function articulostj_form($form, &$form_state) {
  $form['articulostj_max'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum number of products'),
    '#default_value' => variable_get('articulostj_max', 3),
      '#size' => 2,
    '#maxlength' => 2,
    '#description' => t('The maximum number of links to display in the block.'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/**
 * Implements validation from the Form API.
 * 
 * @param $form
 *   A structured array containing the elements and properties of the form.
 * @param $form_state
 *   An array that stores information about the form's current state 
 *   during processing.
 */
//Comprobamos que el stock introducido es un valor numerico y positivo
function articulostj_form_validate($form, &$form_state){
  $max_num = $form_state['values']['articulostj_max'];
  if (!is_numeric($max_num)){
    form_set_error('articulostj_max', t('You must enter a number for the maximum number of posts to display.'));
  }
  elseif ($max_num <= 0){
    form_set_error('articulostj_max', t('Maximum number of posts to display must be positive.'));
  }
}

/**
 * Implements hook_permission().
 */
//Habilitamos los permisos tanto para nuestro modulo
function articulostj_permission() {
  return array(
    'access articulostj content' => array(
      'title' => t('Access content for the Articulostj module'),
    )
  );
}


/**
* Implements hook_menu().
*/

//Configura la vista para mostrar los productos en nuestra pagina y devolvemos toda la informacion a mostrar
function articulostj_page() {

        $max = variable_get('articulostj_max', 3);

        $output = '<p>Articulos con stock menor a '.$max.'</p>';

        $result = articulostj_contents('page',$max);


        $output .= '<ul>';
        foreach ($result as $node) {
          $product = commerce_product_load($node->entity_id);
          $output .= '<li>';
          $output .= '<a href="admin/commerce/products/'.$node->entity_id.'/edit">'.$product->sku.' -> Stock: '.$node->commerce_stock_value.'</a>';
          $output .= '</li>';
          
        }
        $output .= '</ul>';


  
  return $output;
  
}


//Mismo metodo usado en el bloque, ahora con la informacion para mostrar en la pagina y devolvemos un array con los datos
function _articulostj_page(){

  //Obtenemos el valor de la configuracion del modulo con el stock maximo a mostrar
  $max = variable_get('articulostj_max', 3);
  //Obtenemos los datos de la bd, ahora con el parametro page y con el maximo stock obtenido antes.
  $result = articulostj_contents('page',$max);

  $items = array();
  if (user_access('access articulostj content')) {

  foreach ($result as $node) {
          $product = commerce_product_load($node->entity_id);
          $items[] = array(
            'data' => l($product->sku, 'admin/commerce/products/' . $node->entity_id . '/edit')
          ); 
  }

  if (!empty($items)) { 
    $page_array['articulostj_arguments'] = array(
      '#title' => t('All posts from the last week'),
      '#markup' => articulostj_page(),//llamamos a la funcion anterior para obtener la vista para mostrar los datos de la pagina
    );
    
  }   else {
    $page_array['articulostj_arguments'] = array(
      '#title' => t('All posts from the last week'),
      '#items' => $items,
      
    );

}
}
    return $page_array;  

}






