<?php

/**
 * @file
 * A block module that displays recent blog and forum posts.
 */

/**
 * Implements hook_help().
 *
 * Displays help and module information.
 *
 * @param path 
 *   Which path of the site we're using to display help
 * @param arg 
 *   Array that holds the current path as returned from arg() function
 */
function articulostj_help($path, $arg) {

  switch ($path) {
  
    case "admin/help#articulostj":
    
      return t("Displays links to nodes created on this date"); 
      
      break; 
      
  }
  
}

/**
 * Implements hook_block_info().
 */
function articulostj_block_info() {
  $blocks['articulostj'] = array(
    // The name that will appear in the block list.
    'info' => t('Articulostj'),
    // Default setting.
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  return $blocks;
}

/**
 * Custom content function. 
 * 
 * Set beginning and end dates, retrieve posts from database
 * saved in that time period.
 * 
 * @return 
 *   A result set of the targeted posts.
 */
function articulostj_contents() {

  //Use Database API to retrieve current posts.

  $query = db_select('field_data_commerce_stock', 'n')
    ->fields('n')
    ->condition('commerce_stock_value', 0) //Published.
    ->execute();

    return $query;
}

function commerce_produt_load($product_id) {
  if (empty($product_id)) {
    return FALSE;
  }

  $products = commerce_product_load_multiple(array($product_id), array());
  return $products;
}
  
  /*
  //Use Database API to retrieve current posts.
  $query = db_select('node', 'n')
    ->fields('n', array('nid', 'title', 'created'))
    ->condition('status', 1) //Published.
    ->condition('created', array($start_time, $end_time), 'BETWEEN')
    ->orderBy('created', 'DESC'); //Most recent first. Query paused here.
 
   if ($display == 'block'){ 
  // Restrict the range if called with 'block' argument.
    $query->range(0, $max_num);
  } //Now proceeds to execute().
  //If called by page, query proceeds directly to execute().
  
  return $query->execute();
  
  */
  


/**
 * Implements hook_block_view().
 * 
 * Prepares the contents of the block.
 */
function articulostj_block_view($delta = '') {
  switch ($delta) {
    case 'articulostj':
      $block['subject'] = t('articulostj');
      if (user_access('access content')) {
        // Use our custom function to retrieve data.
        $result = articulostj_contents('block');
        //$result2 = commerce_produt_load($result);
        // Array to contain items for the block to render.
        $items = array();

        // Iterate over the resultset and format as links.
        foreach ($result as $node) {
          $product = commerce_product_load($node->entity_id);
          $items[] = array(
            //http://localhost/todojuguetes/#overlay=admin/commerce/products/5/edit%3Fdestination%3Dadmin/commerce/products
            'data' => l($product->sku, 'admin/commerce/products/' . $node->entity_id . '/edit')
          ); 
        }

       // No content in the last week.
        if (empty($items)) {
          $block['content'] = t('No articles available.');  
        } 
        else {
          // Pass data through theme function.
          $block['content'] = theme('item_list', array(
            'items' => $items));
        }
      }
    return $block;
  }
  
}

/**
 * Implements hook_menu().
 */
function articulostj_menu() {
  $items = array();

  $items['admin/config/content/articulostj'] = array(
    'title' => 'Articulostj',
    'description' => 'Configuration for Articulostj module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('articulostj_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Page callback: Current posts settings
 *
 * @see articulostj_menu()
 */
function articulostj_form($form, &$form_state) {
  $form['articulostj_max'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum number of products'),
    '#default_value' => variable_get('articulostj_max', 3),
    '#size' => 2,
    '#maxlength' => 2,
    '#description' => t('The maximum number of links to display in the block.'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/**
 * Implements validation from the Form API.
 * 
 * @param $form
 *   A structured array containing the elements and properties of the form.
 * @param $form_state
 *   An array that stores information about the form's current state 
 *   during processing.
 */
function articulostj_form_validate($form, &$form_state){
  $max_num = $form_state['values']['articulostj_max'];
  if (!is_numeric($max_num)){
    form_set_error('articulostj_max', t('You must enter a number for the maximum number of posts to display.'));
  }
  elseif ($max_num <= 0){
    form_set_error('articulostj_max', t('Maximum number of posts to display must be positive.'));
  }
}

/**
 * Implements hook_permission().
 */
function articulostj_permission() {
  return array(
    'access articulostj content' => array(
      'title' => t('Access content for the Articulostj module'),
    )
  );
}